{"version":3,"sources":["components/inputURL.js","components/renderURL.js","components/rebrandly.js","App.js","serviceWorker.js","index.js"],"names":["InputURL","props","state","grandURL","bind","document","getElementById","value","this","onChange","Col","lg","Form","Group","controlId","Label","Control","type","React","Component","RenderURL","href","petitURL","Rebrandly","click","envoieURL","getData","fetch","method","headers","body","JSON","stringify","destination","response","ok","json","jsonResponse","console","log","setState","shortUrl","Error","ancienneURL","nouvelleURL","Button","variant","onClick","Row","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAGaA,EAAb,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,GACX,EAAKC,SAAS,EAAKA,SAASC,KAAd,gBAHA,EADtB,uDAQI,IAAID,EAAUE,SAASC,eAAe,YAAYC,MAClDC,KAAKP,MAAMQ,SAASN,KATxB,+BAWc,IAAD,OACL,OACQ,kBAACO,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACC,EAAA,EAAD,CAAMH,SAAU,kBAAM,EAAKN,aACvB,kBAACS,EAAA,EAAKC,MAAN,CAAYC,UAAU,YAClB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,gBAjB/C,GAA8BC,IAAMC,WCGvBC,EAAb,uKAGQ,OACQ,kBAACV,EAAA,EAAD,CAAKC,GAAG,KAAR,gBACcH,KAAKP,MAAME,SACzB,6BAFA,mCAGgC,uBAAGkB,KAAK,yBAAyBb,KAAKP,MAAMqB,eAP5F,GAA+BJ,IAAMC,WCAxBI,EAAb,kDACI,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CAACsB,OAAM,EACNrB,SAAS,GACTmB,SAAS,IACrB,EAAKE,MAAM,EAAKA,MAAMpB,KAAX,gBACX,EAAKqB,UAAU,EAAKA,UAAUrB,KAAf,gBACf,EAAKsB,QAAQ,EAAKA,QAAQtB,KAAb,gBAPC,EADtB,8KAWmB,mCAXnB,kBAaiCuB,MAAM,qCAAqC,CAC/DC,OAAO,OACPC,QAAS,CAAC,eAAgB,mBAAmB,OAJvC,oCAKNC,KAAKC,KAAKC,UAAU,CAACC,YAAazB,KAAKN,MAAMC,aAhB1D,YAagB+B,EAbhB,QAkBsBC,GAlBtB,iCAmBuCD,EAASE,OAnBhD,cAmBkBC,EAnBlB,OAoBYC,QAAQC,IAAIF,GACZ7B,KAAKgC,SAAS,CAAClB,SAAWe,EAAaI,SACvBjB,OAAM,IACtBc,QAAQC,IAAIF,EAAaI,UAvBrC,kBAwBmBJ,GAxBnB,cA0BgB,IAAIK,MAAM,mBA1B1B,kCA6BUJ,QAAQC,IAAR,MA7BV,gJAiCUI,EAAaC,GACnBpC,KAAKgC,SAAS,CAACrC,SAASwC,EACRrB,SAASsB,MAnC7B,8BAqCQ,IAAD,OACH,OAAsB,IAAnBpC,KAAKN,MAAMsB,MACF,oCACJ,kBAAC,EAAD,CACAf,SAAUD,KAAKiB,YACnB,kBAACoB,EAAA,EAAD,CAAQC,QAAQ,UACZC,QAAS,kBAAK,EAAKrB,YADvB,aAO0B,IAArBlB,KAAKN,MAAMsB,MAEhB,kBAAC,EAAD,CACArB,SAAUK,KAAKN,MAAMC,SACrBmB,SAAUd,KAAKN,MAAMoB,gBAJpB,IAjDT,+BA0DQ,OACI,kBAAC0B,EAAA,EAAD,KACKxC,KAAKgB,aA5DtB,GAA+BN,IAAMC,WCMtB8B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrD,SAASC,eAAe,SDyHpB,kBAAmBqD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.03055e3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Col,Form} from 'react-bootstrap'\r\n\r\nexport class InputURL extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={}\r\n        this.grandURL=this.grandURL.bind(this);\r\n    }\r\n\r\ngrandURL(){\r\n    let grandURL= document.getElementById('inputURL').value;\r\n    this.props.onChange(grandURL);\r\n}   \r\n    render() {\r\n        return(\r\n                <Col lg='6'>\r\n                    <Form onChange={() => this.grandURL()}>\r\n                        <Form.Group controlId=\"inputURL\">\r\n                            <Form.Label>Entrez l'URL</Form.Label>\r\n                            <Form.Control type=\"text\"/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {Col} from 'react-bootstrap';\r\n\r\n\r\n\r\n\r\nexport class RenderURL extends React.Component{\r\n\r\n    render() {\r\n        return(\r\n                <Col lg='6'>\r\n                Votre Lien : {this.props.grandURL}\r\n                <br/>\r\n                Votre nouveau lien plus court : <a href='{this.props.petitURL}'>{this.props.petitURL}</a>\r\n                </Col>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Row,Button} from 'react-bootstrap';\r\nimport {InputURL} from './inputURL';\r\nimport {RenderURL} from './renderURL';\r\n\r\n\r\nexport class Rebrandly extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={click:false,\r\n                    grandURL:'',\r\n                    petitURL:''}\r\n        this.click=this.click.bind(this);\r\n        this.envoieURL=this.envoieURL.bind(this);\r\n        this.getData=this.getData.bind(this);\r\n    }\r\n async getData(){\r\n    const apiKey = \"cef2bd7af23c4c5e998e32fd313b6ca6\";\r\n       try{ \r\n          const response = await fetch('https://api.rebrandly.com/v1/links',{ \r\n             method:'POST', \r\n             headers: {'Content-Type': 'application/json','apikey': apiKey  }, \r\n             body:JSON.stringify({destination: this.state.grandURL}),\r\n           }); \r\n          if(response.ok){ \r\n            const jsonResponse = await response.json();\r\n            console.log(jsonResponse); \r\n            this.setState({petitURL : jsonResponse.shortUrl,\r\n                            click:true});\r\n            console.log(jsonResponse.shortUrl) \r\n            return jsonResponse;              \r\n          } \r\n          throw new Error('Request failed!'); \r\n       } \r\n       catch(error){ \r\n          console.log(error); \r\n       }\r\n           }     \r\n\r\nenvoieURL(ancienneURL, nouvelleURL){\r\n    this.setState({grandURL:ancienneURL,\r\n                    petitURL:nouvelleURL })\r\n}\r\nclick(){\r\n    if(this.state.click===false){\r\n        return (<>\r\n            <InputURL \r\n            onChange={this.envoieURL}/>\r\n        <Button variant=\"primary\" \r\n            onClick={()=> this.getData()}>\r\n            Generer\r\n        </Button>\r\n        </>    \r\n        )\r\n    }\r\n    else if (this.state.click === true){\r\n        return(\r\n        <RenderURL\r\n        grandURL={this.state.grandURL}\r\n        petitURL={this.state.petitURL}/>\r\n        )\r\n    }\r\n}\r\n    render() {\r\n        return(\r\n            <Row>\r\n                {this.click()}       \r\n            </Row>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport {Rebrandly} from './components/rebrandly';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Rebrandly/>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}